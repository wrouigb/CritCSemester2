import tkinter as tk
from tkinter import *
from tkinter import ttk
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import math

class GeometryCalculator:
    def __init__(self, root):
        self.root = root
        self.root.title("Coordinate Geometry Calculator")
        
        # Create main container
        self.main_frame = tk.Frame(root)
        self.main_frame.pack(padx=10, pady=10)

        # Calculation type selection
        self.calculation_var = tk.StringVar()
        self.calculation_combobox = ttk.Combobox(
            self.main_frame, 
            textvariable=self.calculation_var,
            values=["Distance between points", 
                    "Circle from 3 points",
                    "Slope between points"]
        )
        self.calculation_combobox.current(0)
        self.calculation_combobox.grid(row=0, column=0, pady=5)
        
        # Coordinate input fields
        self.input_frame = tk.Frame(self.main_frame)
        self.input_frame.grid(row=1, column=0, pady=5)
        
        # Plot area
        self.figure = plt.Figure(figsize=(5, 4), dpi=100)
        self.ax = self.figure.add_subplot(111)
        self.canvas = FigureCanvasTkAgg(self.figure, master=self.main_frame)
        self.canvas.get_tk_widget().grid(row=2, column=0, pady=5)
        
        # Buttons
        self.calculate_btn = tk.Button(
            self.main_frame, 
            text="Calculate", 
            command=self.perform_calculation
        )
        self.calculate_btn.grid(row=3, column=0, pady=5)
        
        # Result display
        self.result_label = tk.Label(self.main_frame, text="")
        self.result_label.grid(row=4, column=0, pady=5)
        
        # Initialize input fields
        self.create_input_fields()
        
    def create_input_fields(self):
        # Clear existing fields
        for widget in self.input_frame.winfo_children():
            widget.destroy()
            
        # Create new fields based on calculation type
        calculation = self.calculation_var.get()
        if "Circle" in calculation:
            points = 3
        else:
            points = 2
            
        self.entries = []
        for i in range(points):
            tk.Label(self.input_frame, text=f"Point {i+1} (x,y):").grid(row=i, column=0)
            entry = tk.Entry(self.input_frame)
            entry.grid(row=i, column=1)
            self.entries.append(entry)
            
        # Add plot button
        self.plot_btn = tk.Button(
            self.input_frame, 
            text="Plot Points", 
            command=self.plot_points
        )
        self.plot_btn.grid(row=points, columnspan=2, pady=5)
        
    def get_coordinates(self):
        coords = []
        for entry in self.entries:
            try:
                x, y = map(float, entry.get().split(','))
                coords.append((x, y))
            except:
                return None
        return coords
    
    def plot_points(self):
        self.ax.clear()
        coords = self.get_coordinates()
        
        if coords:
            xs, ys = zip(*coords)
            self.ax.scatter(xs, ys, color='red')
            
            # Draw connecting lines for certain calculations
            if len(coords) == 2:
                self.ax.plot(xs, ys, 'b--')
            elif len(coords) == 3:
                xs += (xs[0],)
                ys += (ys[0],)
                self.ax.plot(xs, ys, 'g--')
                
            self.ax.grid(True)
            self.canvas.draw()
            
    def perform_calculation(self):
        coords = self.get_coordinates()
        if not coords:
            self.result_label.config(text="Invalid coordinates!")
            return
            
        calculation = self.calculation_var.get()
        result = ""
        
        if calculation == "Distance between points":
            dx = coords[1][0] - coords[0][0]
            dy = coords[1][1] - coords[0][1]
            distance = math.sqrt(dx**2 + dy**2)
            result = f"Distance: {distance:.2f}"
            
        elif calculation == "Slope between points":
            dx = coords[1][0] - coords[0][0]
            dy = coords[1][1] - coords[0][1]
            if dx == 0:
                result = "Slope: undefined (vertical line)"
            else:
                slope = dy / dx
                result = f"Slope: {slope:.2f}"
                
        elif calculation == "Circle from 3 points":
            # Implementation based on search result [4]
            (x1, y1), (x2, y2), (x3, y3) = coords
            a = (x2 - x3)**2 + (y2 - y3)**2
            b = (x3 - x1)**2 + (y3 - y1)**2
            c = (x1 - x2)**2 + (y1 - y2)**2
            s = 2 * (a*b + b*c + c*a) - (a**2 + b**2 + c**2)
            
            px = (a*(b+c-a)*x1 + b*(c+a-b)*x2 + c*(a+b-c)*x3) / s
            py = (a*(b+c-a)*y1 + b*(c+a-b)*y2 + c*(a+b-c)*y3) / s
            
            ar = math.sqrt(a)
            br = math.sqrt(b)
            cr = math.sqrt(c)
            radius = (ar*br*cr) / math.sqrt((ar+br+cr)*(-ar+br+cr)*(ar-br+cr)*(ar+br-cr))
            
            result = f"Center: ({px:.2f}, {py:.2f})\nRadius: {radius:.2f}"
            self.ax.add_artist(plt.Circle((px, py), radius, color='blue', fill=False))
            self.canvas.draw()
            
        self.result_label.config(text=result)

if __name__ == "__main__":
    root = tk.Tk()
    app = GeometryCalculator(root)
    root.mainloop()
